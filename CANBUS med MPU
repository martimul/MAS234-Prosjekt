// -------------------------------------------------------------
// CANtest for Teensy 3.6 dual CAN bus
// by Collin Kidder, Based on CANTest by Pawelsky (based on CANtest by teachop)
//
// Both buses are left at default 250k speed and the second bus sends frames to the first
// to do this properly you should have the two buses linked together. This sketch
// also assumes that you need to set enable pins active. Comment out if not using
// enable pins or set them to your correct pins.
//
// This sketch tests both buses as well as interrupt driven Rx and Tx. There are only
// two Tx buffers by default so sending 5 at a time forces the interrupt driven system
// to buffer the final three and send them via interrupts. All the while all Rx frames
// are internally saved to a software buffer by the interrupt handler.
//

#include <FlexCAN.h>
#include <util/delay.h>
#include <Wire.h>
#define MPU6050_AFS_SEL_2G  MPU6050_AFS_SEL_0


#ifndef __MK66FX1M0__
  #error "Teensy 3.6 with dual CAN bus is required to run this example"
#endif

static CAN_message_t msg;
static uint8_t hex[17] = "0123456789abcdef";

int LED = 13;
bool paa = 1;

const int MPU_addr=0x68;
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;

const int ledPin = 13;
double x;
double y;
double z;
int minVal=265;
int maxVal=402;



// -------------------------------------------------------------
static void hexDump(uint8_t dumpLen, uint8_t *bytePtr)
{
  uint8_t working;
  while( dumpLen-- ) {
    working = *bytePtr++;
    Serial.write( hex[ working>>4 ] );
    Serial.write( hex[ working&15 ] );
  }
  Serial.write('\r');
  Serial.write('\n');
}


// -------------------------------------------------------------
void setup(void)
{
  delay(1000);
  Serial.println(F("Hello Teensy 3.6 dual CAN Test."));

  static struct CAN_filter_t defaultMask;
  defaultMask.id = 0;

  Can0.begin(250000, defaultMask, 1, 1 );
  Can1.begin(250000, defaultMask, 0, 0 );

  //if using enable pins on a transceiver they need to be set on
  pinMode(13, OUTPUT);
  pinMode(28, OUTPUT);

  digitalWrite(13, HIGH);
  digitalWrite(28, LOW);

  msg.ext = 0;
  msg.id = 0x20;
  msg.len = 8;

//-------------------------------------
//MPU SETUP

  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(00000000);
  pinMode(2, OUTPUT);
  Serial.begin(9600);
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
  pinMode(ledPin, OUTPUT);

//---------------------------------------

  
}


// -------------------------------------------------------------
void loop(void)
{
  
  while (Can0.available()) 
  {
        
    CAN_message_t inMsg;              
    Can0.read(inMsg);                 //Leser meldingen
    Serial.print("CAN0 output: "); 
    hexDump(8, inMsg.buf);            //printer output Msg
    Can0.write(inMsg);                //Skriver meldingen 
    
    if(inMsg.id == 0x21)              // 0x21 toggler led pæra på. <-- er hentet ut ifra oppgaven.
    {
      digitalWrite(LED, paa);         //setter pæren høy
      paa = !paa;                     // inverterer paa
    }
    else if(inMsg.id == 0x22)
    {
      bool lastbit = inMsg.buf[7];    //Siden vi setter msg.leng (lengen) til 7
      digitalWrite(LED, lastbit);     //Skriver til den siste bit og setter den til 0. Fordi 0x22 ut ifra oppgaven setter minst signifikante bit til av eller på.
    }
    
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
 
  AcX=((Wire.read()<<8|Wire.read())/(16384));
  //  GyX=((Wire.read()<<8|Wire.read())/17);  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  //  AcY=Wire.read()<<8|Wire.read())/(16384));
  //  AcZ=Wire.read()<<8|Wire.read())/(16384));
  
  int xAng = map(AcX,minVal,maxVal,-90,90);
  int yAng = map(AcY,minVal,maxVal,-90,90);
  int zAng = map(AcZ,minVal,maxVal,-90,90);

  
  //Serial.print(" | GyX = "); Serial.print(x);
     Serial.print("AngleX= ");
     Serial.println(AcX);

     Serial.print("AngleY= ");
     Serial.println(AcY);

     Serial.print("AngleZ= ");
     Serial.println(AcZ);
     Serial.println("-----------------------------------------");       

  }  
}                   
